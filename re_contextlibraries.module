<?php
// $Id$

/**
 * @file
 * This file provides context plugins, logic, and standard hook implementations
 * for the re_contextlibraries module.
 *
 * @author Christopher Torgalson <chris@raisedeyebrow.com>
 */


/**
 * Implements hook_context_plugins().
 */
function re_contextlibraries_context_plugins() {
  $plugins = array();
  $plugins['context_reaction_re_contextlibraries_includelibraries'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 're_contextlibraries') . '/context',
      'file' => 'context_reaction_re_contextlibraries_includelibraries.inc',
      'class' => 'context_reaction_re_contextlibraries_includelibraries',
      'parent' => 'context_reaction',
    ),
  );
  return $plugins;
} // re_contextlibraries_context_plugins()


/**
 * Implements hook_context_registry().
 */
function re_contextlibraries_context_registry() {
  return array(
    'reactions' => array(
      'includelibraries' => array(
        'title' => t('Include libraries'),
        'description' => t('Include description of library inclusion here'),
        'plugin' => 'context_reaction_re_contextlibraries_includelibraries',
      ),
    ),
  );
} // re_contextlibraries_context_registry()


/**
 * Implements hook_help().
 */
function re_contextlibraries_help($path, $arg) {
  $path_to_module = drupal_get_path('module', 're_contextlibraries');
  switch ($path) {
    case 'admin/help#re_contextlibraries':
      $output = '<p>' . t("The RE Context Libraries module provides javascript libraries for use in the Contexts. The main module can be extended by creating very small library modules that provide additional javascript tools. For information about adding library modules for use with RE Context Libraries, please consult the module's !readme-file.", array('!readme-file' => l('README file', $path_to_module . '/README.txt'))) . '</p>';
      break;
  }
  return $output;
} // re_contextlibraries_help()


/**
 * Implements hook_init().
 */
function re_contextlibraries_init() {
  // Find out what reactions are available (if any), and execute 'em:
  if ($plugin = context_get_plugin('reaction', 'includelibraries')) {
    $plugin->execute();
  }
} // re_contextlibraries_init()


/**
 * Load all the necessary files to allow us to play slides.
 *
 * @param array $library_settings The array of library settings for this context
 * @param object $context The current context
 */
function re_contextlibraries_load_resources($library_settings, $context) {
  // Convenience variables from incoming array:
  $library_names = $library_settings['library_name'];
  $library_only = $library_settings['library_only'];
  $library_custom = $library_settings['library_custom'];
  $library_debug = $library_settings['library_debug'];
  // We need to know where the module is and where the libraries folder is:
  $path_to_module = drupal_get_path('module', 're_contextlibraries');
  // Which library has been asked for?
  switch ($library_names) {
    case 'none': // If there isn't one...
      drupal_set_message(t('No library has been set even though the Context Libraries module is active in this context. You can choose one at the !context-settings-page. If you do not have access to this page, please contact an administrator.', array('!context-settings-page' => l('administrative page for this context', 'admin/build/context/list/' . $context->name . '/edit'))), 'error');
      break;
    default: // But if there is one...or more...
      foreach ($library_names as $library_name) {
        // Then, we need to retrieve the library data:
        if ($library_data = variable_get('re_contextlibraries:' . $library_name, 'none')) {
          // Handle js first:
          // We need to check to see if there even ARE any js files in this library:
          if (array_key_exists('js', $library_data)) {
            // Loop through the available js files and add them:
            foreach ($library_data['js'] as $file) {
                // This lovely conditional effectively says "even if the 'library
                // only' box is checked on the context page, we may still add a
                // js file made available by this module or a library module,
                // provided that it (a) does not have the same name as the library
                // module we're currently looking at, AND (b) it is not the utility
                // js file provided by this module":
                if (!$library_only || (strpos($file, $library_name . ' .js') === FALSE && $file != $path_to_module . '/js/re_contextlibraries.js')) { // DeMorgan!
                  drupal_add_js($file, is_array($file) ? 'setting' : 'module');
                }
            }
          }
          // Finally, if specified, we need to add the custom js file to the js array:
          if ($library_custom) {
            $path_to_file = check_plain(str_replace('%t', path_to_theme(), $library_custom));
            drupal_add_js($path_to_file, 'module');
          }
          // Then handle css:
          // There may or may not be any css provided by this library:
          if (array_key_exists('css', $library_data)) {
            // Loop through the available css files and add them:
            foreach ($library_data['css'] as $file) {
              drupal_add_css($file, 'module');
            }
          }
        }
      }
      // We need to display the debug message if the user has requested it--
      // unfortunately, there's no specific context permission for access to the
      // context ui section:
      if ($library_debug) {
        $debug_message = t('The following modules are providing libraries to this context: %libraries. You can change this on the !context-settings-page.', array('%libraries' => implode(', ', array_keys($library_names)), '!context-settings-page' => l('administrative page for this context', 'admin/build/context/list/' . $context->name . '/edit')));
          drupal_set_message($debug_message, 'status', TRUE);
      }
      break;
  }
} // re_contextlibraries_load_resources()


/**
 * Implements hook_permission().
 */
function re_contextlibraries_permission() {
  return array('administer re_contextlibraries');
} // re_contextlibraries_permission()


/**
 * Registers available libraries provided by other modules:
 */
function re_contextlibraries_register_libraries() {
  // Find out about all the libraries available:
  $libraries = module_invoke_all('define_re_contextlibraries_library');
  // Then set variables for each of them, and collect the names only in an array
  // suitable for use in a forms api select:
  $library_options = array('' => 'None');
  foreach ($libraries as $library => $files) {
    variable_set('re_contextlibraries:' . $library, $files);
    $library_options[$library] = $files['name'];
  }
  return $library_options;
} // re_contextlibraries_register_library()